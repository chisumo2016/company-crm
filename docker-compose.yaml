version: '3'
services:
##MICROSERVICES##
  #NGINX SERVICE
  nginx:
    container_name: "${PROJECT_NAME}_nginx"
    build: ## Build the yml file
      context: ./docker/nginx  # Dockerfile will be in the same folder as docker-compose.yml
      dockerfile: Dockerfile  #Use dockerfile for image build
    depends_on:  # This service depends on another service named "app" so start the other service first
      - app
    # Bridge network. all containers in the same network Local:container
    # Host directory (./) : container directory (/var/www/vhost/company-crm:cached)
    volumes:
      - ./:/var/www/vhost/company-crm:cached
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d/:/etc/nginx/conf.d/
      - ./docker/nginx/ssl/:/etc/nginx/ssl
    working_dir: /var/www/vhost/
    ports:
      -  '443:80'
      -  '7000:80'
      -  '9008:9080'
    networks:
      - company-crm
    labels:
      - 'traefik.http.routers.${PROJECT_NAME}_nginx.rule=HostRegexp(`${APP_DOMAIN}`, `{subdomain:[a-z]+.${APP_DOMAIN}}`)'
      - 'traefik.http.routers.${PROJECT_NAME}_nginx.priority=1'
      - 'traefik.docker.network=proxy'
    healthcheck:
      test: ["CMD", "curl", "--fail", "--silent", "--connect-timeout", "1", "http://localhost:9008/api/ping"]
      interval: 60s
      timeout: 3s
      retries: 3

    #  Define deployment replicas and restart policy
    deploy:
      replicas: 2  # Define number of replicas to create for a service deployment
      restart_policy:
        condition: on-failure
        delay: 5s    # Delay before restarting a container
        max_attempts: 3
        window: 120s
#PHP SERVICE
  app:
    container_name: "${PROJECT_NAME}_php"
    build:
      context: ./docker/php
      dockerfile: Dockerfile
    environment:
      PHP_MEMORY_LIMIT: '512M'
      COMPOSER_MEMORY_LIMIT: '-1'
    user: 501:501
    volumes:
      - ./:/var/www/vhost/company-crm:cached
    working_dir: /var/www/vhost/company-crm
    ports:
      - '9003:9003'
    networks:
      - company-crm

  #REDIS SERVICE
  redis:
    image: redis:latest
    container_name: "${PROJECT_NAME}_redis"
    ports:
      - '6379:6379'
    volumes:
      - 'company-crm_redis_data:/data'
    networks:
      - company-crm

  #MYSQL SERVICE
  mysql:
    image: mariadb:latest
    container_name: "${PROJECT_NAME}_mysql"
    environment:
      MYSQL_ROOT_PASSWORD: '${DB_PASSWORD}'
      MYSQL_DATABASE: '${DB_DATABASE}'
      MYSQL_USER: '${DB_USERNAME}'
      MYSQL_PASSWORD: '${DB_PASSWORD}'
      MYSQL_ROOT_HOST: '%'
      MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
      command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    volumes:
      - 'company-crm_mysql:/data'
      #- '${FORWARD_DB_PORT:-4406}:3306'
    ports:
      - '4406:3306'
    networks:
      - company-crm

  #TRAEFIK SERVICE
  traefik:
    image:    traefik:v2.0
    container_name: "${PROJECT_NAME}_traefik"
    restart: always
    command:
      - --entrypoints.web.address=:80
      -  --entrypoints.web-secure.address=:444
      -   --providers.docker=true
      -   --api.insecure=true
      -   --log.level=debug
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock:ro'
      #-  - "/var/run/docker.sock:/var/run/docker.sock:ro"
    ports:
      - '83:80' #'80:80'
      - '8080:8080' #Docker sends requests on port 8080 to Traefik on port 8080
    networks:
      - company-crm   # Put service in "company-crm" bridge network

# NETWORKS
networks:
  company-crm:   # define a bridge network
    driver: bridge

# VOLUMES
volumes:
  company-crm_redis_data:
    driver: local

  company-crm_mysql:
    driver: local

  company-crm_redis:
    driver: local



